naMe:Milk;price:3.23;type:Food;expiration:1/25/2016##
naME:BreaD;price:1.23;type:Food;expiration:1/02/2016##
NAMe:BrEAD;price:1.23;type:Food;expiration:2/25/2016##
naMe:MiLK;price:3.23;type:Food^expiration:1/11/2016##
naMe:Cookies;price:2.25;type:Food%expiration:1/25/2016##
naMe:CoOkieS;price:2.25;type:Food*expiration:1/25/2016##
naMe:COokIes;price:2.25;type:Food;expiration:3/22/2016##
naMe:COOkieS;price:2.25;type:Food;expiration:1/25/2016##
NAME:MilK;price:3.23;type:Food;expiration:1/17/2016##
naMe:MilK;price:1.23;type:Food!expiration:4/25/2016##
naMe:apPles;price:0.25;type:Food;expiration:1/23/2016##
naMe:apPles;price:0.23;type:Food;expiration:5/02/2016##
NAMe:BrEAD;price:1.23;type:Food;expiration:1/25/2016##
naMe:;price:3.23;type:Food;expiration:1/04/2016##
naMe:Milk;price:3.23;type:Food;expiration:1/25/2016##
naME:BreaD;price:1.23;type:Food@expiration:1/02/2016##
NAMe:BrEAD;price:1.23;type:Food@expiration:2/25/2016##
naMe:MiLK;priCe:;type:Food;expiration:1/11/2016##
naMe:Cookies;price:2.25;type:Food;expiration:1/25/2016##
naMe:Co0kieS;pRice:2.25;type:Food;expiration:1/25/2016##
naMe:COokIes;price:2.25;type:Food;expiration:3/22/2016##
naMe:COOkieS;Price:2.25;type:Food;expiration:1/25/2016##
NAME:MilK;price:3.23;type:Food;expiration:1/17/2016##
naMe:MilK;priCe:;type:Food;expiration:4/25/2016##
naMe:apPles;prIce:0.25;type:Food;expiration:1/23/2016##
naMe:apPles;pRice:0.23;type:Food;expiration:5/02/2016##
NAMe:BrEAD;price:1.23;type:Food;expiration:1/25/2016##
naMe:;price:3.23;type:Food^expiration:1/04/2016##

**********************************************
*              returnList Logic              *
**********************************************

                       |                                                                                                        |
return Pattern.compile | ("(?i)(?<=name:"+foodItem.charAt(0)+".{"+(foodItem.length() - 1)+"};price[:;])[0-9].[0-9][0-9]+(?=;)") | .matcher(compileMatcherMapStream).results().map((m) -> m.group()).collect(Collectors.toList());
                       |                                                                                                        |

===============================================

Pattern.compile
creates "Pattern" object from java.util.regex package as a string

===============================================

       |      |                             |                                |             |                   |
("(?i) | (?<= | name:"+foodItem.charAt(0)+" | .{"+(foodItem.length() - 1)+"} | ;price[:;]) | [0-9].[0-9][0-9]+ | (?=;)")
       |      |                             |                                |             |                   |

(?i)
makes the regex ignore casing
https://stackoverflow.com/questions/9655164/regex-ignore-case-sensitivity

(?<=...
lookbehind assertion, follows logic before the match without including it in the match
Find expression A where expression B precedes: (?<=B)A
    Cannot have repetition inside a lookbehind
https://duckduckgo.com/?q=regex+cheat+sheet&ia=cheatsheet&iax=1
https://stackoverflow.com/questions/2973436/regex-lookahead-lookbehind-and-atomic-groups

name:"+foodItem.charAt(0)+"
inserts the first character of the foodItem variable into the regex

.{"+(foodItem.length() - 1)+"}
matches any character (.) exactly (foodItem.length() - 1) times, dynamically adjusts based on the length of the foodItem string, logic kind of follows formatting method but not really
https://duckduckgo.com/?q=regex+cheat+sheet&ia=cheatsheet&iax=1
https://stackoverflow.com/questions/10172753/adding-variables-in-a-regular-expression-to-make-it-dynamic-in-java

;price[:])
matches ";price" followed by ":"
https://regexr.com/3m8em

[0-9].[0-9][0-9]+
matches a number pattern [digit].[digit][digit]
https://regexr.com/3m8em

(?=;)
positive lookahead assertion, indicates that what follows the match must adhere to the pattern inside "(?=;)" in other words, the ";" must follow the price

===============================================

                                  |            |                        |
.matcher(compileMatcherMapStream) | .results() | .map((m) -> m.group()) | .collect(Collectors.toList());
                                  |            |                        |

.matcher(compileMatcherMapStream)
creates a "Matcher" object for the given input string "compileMatcherMapStream" using the compiled pattern from the first part.
https://school.zipcode.rocks/student/docs?id=1380

.results()
method returns a "Stream<MatchResult>" of all matches found. Each "MatchResult" represents a successful match of the pattern in the input string

.map((m) -> m.group())
operation transforms each "MatchResult" from .results() in the stream to be matched substring "m.group()", the ".group()" method of 'MatchResult' returns the actual text that matched the pattern.
https://school.zipcode.rocks/student/docs?id=1177

.collect(Collectors.toList());
collects results from the stream into a List<String>, Collectors.toList() is a utility that gathers the elements of the steam into a list
https://school.zipcode.rocks/student/docs?id=1177

//
//
//
//
//

**********************************************
*                 logic Logic                *
**********************************************

StringBuilder sb = new StringBuilder("name:"+ formatting(foodItem)+"       seen: " +list.size()+ " times\n=============       =============\n");
(new HashSet<>(list)).stream().forEach((m)->{sb.append(String.format("Price:   %s       seen: %d times\n-------------       -------------\n",m, Collections.frequency(list, m)));});
return sb.append("\n").toString();

===============================================

                                                                                     |
StringBuilder sb = new StringBuilder("name:"+ formatting(foodItem)+"       seen: " + | list.size()+ " times\n=============       =============\n");
                                                                                     |

formatting(foodItem) calls the formatting method, result from the formatting method will concat with "name:"
list.size() returns the number of elements in the list, representing how many items are in it

===============================================

                      |           |                                          |                                                                           |
(new HashSet<>(list)) | .stream() | .forEach((m)->{sb.append(String.format(" | Price:   %s       seen: %d times\n-------------       -------------\n",m, | Collections.frequency(list, m)));});
                      |           |                                          |                                                                           |

.stream() converts the HashSet to a Stream, allows functional-style operations to be performed on the elements.
.forEach((m) -> { ... }) iterates over each unique item (m) in the stream. The lambda expression (m) -> { ... } specifies the actions to perform for each item.
"Price: %s": Placeholder %s is replaced by the unique item m.
"seen: %d times": Placeholder %d is replaced by the frequency of the item m in the original list, using Collections.frequency(list, m).
Collections.frequency(list, m) returns the number of times the element m appears in the list.
https://school.zipcode.rocks/student/docs?id=1177

===============================================

return sb.append("\n").toString();
converts back to string after appending a newline to object "sb"

//
//
//
//
//

**********************************************
*                 main Logic                 *
**********************************************

Arrays.stream(foodItem).forEach(p->sb.append(logic(returnList(p, output), p)));
sb.append("Errors        	 	 seen: " +Pattern.compile("[:@^*%;][:@^*%;]", Pattern.CASE_INSENSITIVE).matcher(output).results().count() +" times");

===============================================

                        |                       |         |
Arrays.stream(foodItem) | .forEach(p->sb.append | (logic( | returnList(p, output), p)));
                        |                       |         |

Arrays.stream(foodItem)
converts foodItem array into a Stream

.forEach(p->sb.append(logic(returnList(p, output), p))
lambda expression defines the action to be performed on each element p of the stream. It takes p as input and processes it using the logic method, then appends the result to the StringBuilder sb

logic(returnList(p, output), p)
calls the logic method with two arguments: the List<String> from returnList(p, output) and the current element p, the logic method processes these inputs and returns a String

(returnList(p, output)
Calls the returnList method with p (an element from the foodItem array) and output (a String), method is expected to return a List<String> based on logic method involving p and output

===============================================

                                                                      |
sb.append("Errors        	 	 seen: " +Pattern.compile("[:;][:;]", | Pattern.CASE_INSENSITIVE).matcher(output).results().count() +" times");
                                                                      |

Pattern.compile("[:;][:;]", Pattern.CASE_INSENSITIVE)
compiles the given regex into a 'Pattern' object

[:;][:;]
this is what checks for errors, counts the number of occurrences of a pattern in the output string and appends this (string)number to sb